"""실제 데이터에서 선별한 테스트 문장들"""

import pandas as pd
from pathlib import Path

def create_real_test_data():
    """첨부된 데이터에서 선별한 테스트 문장들"""
    
    # 다양한 길이와 패턴의 문장들을 선별
    test_data = [
        # 1. 짧은 한문장 (기본 테스트)
        {
            "id": 14,
            "src": "興也라",
            "tgt": "興이다."
        },
        
        # 2. 중간 길이 (조사/어미 포함)
        {
            "id": 15,
            "src": "蒹은 薕(렴)이요 葭는 蘆也라",
            "tgt": "蒹은 물억새이고 葭는 갈대이다."
        },
        
        # 3. 복합문 (접속사 포함)
        {
            "id": 17,
            "src": "白露凝戾爲霜然後에 歲事成이요 國家待禮然後興이라",
            "tgt": "白露가 얼어 서리가 된 뒤에야 歲事가 이루어지고 國家는 禮가 행해진 뒤에야 흥성한다."
        },
        
        # 4. 긴 설명문 (복잡한 구조)
        {
            "id": 18,
            "src": "箋云 蒹葭在衆草之中에 蒼蒼然彊盛이라가 至白露凝戾爲霜이면 則成而黃이라",
            "tgt": "箋云： 갈대는 여러 풀 가운데에 푸르게 무성했다가 白露가 얼어 서리가 되면 다 자라 누래진다."
        },
        
        # 5. 비유문 (은유적 표현)
        {
            "id": 19,
            "src": "興者는 喩衆民之不從襄公政令者는 得周禮以敎之면 則服이라",
            "tgt": "興한 것은 襄公의 政令을 따르지 않는 백성들은 <군주가> 周禮를 따라 교화시키면 복종한다는 것을 비유한 것이다."
        },
        
        # 6. 시문 (운율이 있는 원문)
        {
            "id": 13,
            "src": "蒹葭蒼蒼이러니 白露爲霜이로다",
            "tgt": "갈대 무성하더니 白露 서리가 되었네"
        },
        
        # 7. 의문문
        {
            "id": 20,
            "src": "所謂伊人이 在水一方이언마는",
            "tgt": "이른바 그 분이 강물 저쪽에 있건만"
        },
        
        # 8. 매우 긴 복합문 (최고 난이도)
        {
            "id": 41,
            "src": "若逆流遡洄而往從之, 則道險阻且長遠, 不可得至, 言逆禮以治國, 則無得人道, 終不可至. 若順流遡游而往從之, 則宛然在於水之中央, 言順禮治國, 則得人之道, 自來迎己, 正近在禮樂之內.",
            "tgt": "만일 물살을 거슬러 올라가서 따른다면 길이 험하고 막히며 멀어서 도달할 수 없다는 것은, 禮에 어긋나게 나라를 다스리면 사람을 얻는 방도가 없어서 끝내 이를 수 없음을 말한 것이고, 물살에 순응하며 따라 내려가 만나려 하면 宛然히 물 가운데 있다는 것은, 禮에 따라 나라를 다스리면 사람을 얻는 道이니 절로 와서 나를 맞이함이 바로 禮樂의 안에 가까이 있음을 말한 것이다."
        },
        
        # 9. 인용문 (따옴표 포함)
        {
            "id": 42,
            "src": "然則非禮, 必不得人, 得人, 必能固國, 君何以不求用周禮乎.",
            "tgt": "그러니 禮가 아니면 반드시 사람을 얻을 수 없고, 사람을 얻어야 반드시 나라를 견고하게 할 수 있는데, 군주는 어찌하여 周禮 따름을 추구하지 않는가."
        },
        
        # 10. 전문 용어 설명 (사전식 정의)
        {
            "id": 52,
            "src": "正義曰：'蒹 薕 葭 蘆', 釋草文, 郭璞曰"蒹, 似萑而細, 高數尺.",
            "tgt": "正義曰：'蒹, 薕', '葭, 蘆'는 ≪爾雅≫ <釋草>의 글인데 郭璞은 \"蒹은 물억새(萑)와 비슷한데 가늘고 키가 數尺이다."
        }
    ]
    
    # DataFrame 생성
    df = pd.DataFrame(test_data)
    
    # 엑셀 파일로 저장
    output_path = Path("real_test_data.xlsx")
    df.to_excel(output_path, index=False)
    
    print(f"✅ 실제 테스트 데이터 생성: {output_path}")
    print(f"📊 문장 수: {len(test_data)}개")
    print(f"📏 길이 분포:")
    
    # 길이별 통계
    src_lengths = [len(row['src']) for row in test_data]
    tgt_lengths = [len(row['tgt']) for row in test_data]
    
    print(f"   원문 길이: 최소 {min(src_lengths)}, 최대 {max(src_lengths)}, 평균 {sum(src_lengths)/len(src_lengths):.1f}")
    print(f"   번역 길이: 최소 {min(tgt_lengths)}, 최대 {max(tgt_lengths)}, 평균 {sum(tgt_lengths)/len(tgt_lengths):.1f}")
    
    # 문장 유형별 분류
    print(f"\n📝 선별 기준:")
    print(f"   • 짧은 문장 (10자 이내): 1개")
    print(f"   • 중간 문장 (10-50자): 4개") 
    print(f"   • 긴 문장 (50-100자): 3개")
    print(f"   • 매우 긴 문장 (100자 이상): 2개")
    
    # 특징별 분류
    print(f"\n🎯 특징별 분류:")
    print(f"   • 한자+조사 혼합: 4개")
    print(f"   • 시문/운율: 1개") 
    print(f"   • 설명문: 3개")
    print(f"   • 인용문: 1개")
    print(f"   • 전문용어: 1개")
    
    # 미리보기
    print(f"\n📋 테스트 데이터 미리보기:")
    for i, row in enumerate(test_data[:3], 1):
        print(f"{i}. [ID {row['id']}] 원문: {row['src'][:50]}{'...' if len(row['src']) > 50 else ''}")
        print(f"   번역: {row['tgt'][:50]}{'...' if len(row['tgt']) > 50 else ''}\n")
    
    return output_path

if __name__ == "__main__":
    create_real_test_data()